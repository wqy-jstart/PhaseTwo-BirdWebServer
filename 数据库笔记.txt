# 数据库
# 存储数据的仓库，就称为数据库。
# 我们创建的一个目录users,里面存放了很多的obj文件，每个文件保存了一组信息。users就是一个
# 数据库。只是我们管理起来要么手动，要么写一些代码进行维护。
# 低效，不通用。
#
# 数据库管理系统DBMS: DataBaseManagementSystem
# 常见的数据库管理系统:
# MySQL
# ORACLE
# SQLServer
# DB2

# 主要的学习目标:
# SQL：Structured Query Language
# 学习SQL语句。
# SQL语句是我们操作数据库的语言，通过执行SQL可以完成对数据的相关操作。


# 连接数据库的形式:
# 1:控制台(命令行)的客户端
# 2:第三方图形界面的软件
# 3:IDEA这样的集成开发环境中也带有连接数据库的操作
# 4:使用JDBC连接数据库
#
# SQL基础:
# 查看当前MySQL当中有多少个数据库:
SHOW DATABASES;

# 创建数据库:
# CREATE DATABASE 数据库名
# 创建数据库:mydb
CREATE DATABASE mydb;

# 数据库创建时可以指定字符集
# CREATE DATABASE 数据库名 CHARSET=UTF8/GBK

# 创建数据库:db1(字符集用gbk)  db2(字符集用utf8)
CREATE DATABASE db1 CHARSET=UTF8;
CREATE DATABASE db2 CHARSET=GBK;

# 查看数据库信息
# SHOW CREATE DATABASE 数据库名;
SHOW CREATE DATABASE db2;

# 删除数据库
# DROP DATABASE 数据库名
DROP DATABASE db1;
DROP DATABASE db2;

# 想保存数据,就要选取需要保存数据的数据库,然后才能在该数据库中建立表等操作.
# USE 数据库名
# 使用mydb这个数据库
USE mydb;

练习:
# 1. 创建 mydb1和mydb2 数据库 字符集分别为utf8和gbk
CREATE DATABASE mydb1 CHARSET=utf8;
CREATE DATABASE mydb2 CHARSET=gbk;
# 2. 查询所有数据库检查是否创建成功
SHOW DATABASES;
# 3. 检查两个数据库的字符集是否正确
SHOW CREATE DATABASE mydb1;
SHOW CREATE DATABASE mydb2;
# 4. 先使用mydb2 再使用 mydb1
USE mydb2;
USE mydb1;
# 5. 删除两个数据库
DROP DATABASE mydb1;
DROP DATABASE mydb2;

# 在mysql中,我们可以为不同的项目创建不同的数据库.而每个数据库中都可以创建若干张表.每张表
# 用来保存一组数据.比如我们为保存用户信息可以创建userinfo表.保存文章信息可以创建article表等

# SQL语句分类:
# DDL,DML,DQL,TCL,DCL

# 表相关的操作
# DDL语句:数据定义语言,用来操作数据库对象的.
# 数据库对象:表,视图,索引都属于数据库对象.

# 创建表
# CREATE TABLE 表名(
                                                                                                                                                                                   #     列名1 类型[(长度)] [DEFAULT 默认值] [约束条件],
                                                                                                                                                                                   #     列名2 类型...
                                                                                                                                                                                       # )[CHARSET=utf8/gbk]

# 创建userinfo表
CREATE TABLE userinfo(
     id INT,
     username VARCHAR(32),
     password VARCHAR(32),
     nickname VARCHAR(32),
     age INT(3)
)
# 数字的长度表示位数,VARCHAR的长度表示最多占用的字节数

# 查看当前数据库创建的所有表
SHOW TABLES;

# 查看创建的某一张表的详细信息
# SHOW CREATE TABLE 表名
SHOW CREATE TABLE userinfo;

#查看表结构
# DESC 表名
DESC userinfo;

#删除表
# DROP TABLE 表名
DROP TABLE userinfo;

#修改表
#修改表名
# RENAME TABLE 原表名 TO 新表名
RENAME TABLE userinfo TO user;

# 练习:
# 1. 创建数据库mydb3 字符集gbk 并使用
CREATE DATABASE mydb3 CHARSET=gbk;
USE mydb3;
# 2. 创建t_hero英雄表, 有名字和年龄字段 默认字符集
CREATE TABLE t_hero(
      id INT,
      name VARCHAR(32),
      age INT(3)
);
# 3. 修改表名为hero
RENAME TABLE t_hero TO hero;
# 4. 查看表hero的字符集
SHOW CREATE TABLE hero;
# 5. 查询表hero结构
DESC hero;
# 6. 删除表hero
DROP TABLE hero;
# 7. 删除数据库mydb3
DROP DATABASE mydb3;

# 修改表结构:ALTER TABLE
# 实际开发中,通常不建议在表中含有数据时修改表结构
# 添加列
# ALTER TABLE 表名 ADD 列名 类型[长度]
ALTER TABLE user ADD gender VARCHAR(10);
DESC user;

# CREATE TABLE hero(
#     username VARCHAR(32),
#     age INT(3)
# )

# 在表的第一列上添加新列
# ALTER TABLE 表名 ADD 列名 类型[长度] FIRST
ALTER TABLE hero ADD id INT FIRST;
DESC hero;

# 在表中插入一个字段
# ALTER TABLE 表名 ADD 列名 类型[长度] AFTER 字段名
ALTER TABLE hero ADD gender VARCHAR(10) AFTER username;

#删除表中现有的列
# ALTER TABLE 表名 DROP 字段名(注:列名)
ALTER TABLE hero DROP gender;
DESC hero;

# 修改表中现有的列
# 注意,当表中含有数据后,字段类型尽量不要改变,长度修改尽量不要减少,否则都有可能违背表中现有
# 数据要求导致修改失败.

# ALTER TABLE 表名 CHANGE 原字段名 新字段名 新类型
# 将age的类型从INT换成VARCHAR
ALTER TABLE hero CHANGE age age VARCHAR(10);
# 将age的长度改为100
ALTER TABLE hero CHANGE age age VARCHAR(100);
# 将age改为gender,长度改为10
ALTER TABLE hero CHANGE age gender VARCHAR(10);

# 练习:
# 1. 创建数据库mydb4 字符集utf8并使用
CREATE DATABASE mydb4 CHARSET=utf8;
USE mydb4;
# 2. 创建teacher表 有名字(name)字段
CREATE TABLE teacher(
    name VARCHAR(32)
);
# 3. 添加表字段: 最后添加age 最前面添加id(int型) , age前面添加salary工资(int型)
ALTER TABLE teacher ADD age INT(3);
ALTER TABLE teacher ADD id INT FIRST;
ALTER TABLE teacher ADD salary INT AFTER name;

# 4. 删除age字段
ALTER TABLE teacher DROP age;
# 5. 修改表名为t
RENAME TABLE teacher TO t;
# 6. 删除表t
DROP TABLE t;
# 7. 删除数据库mydb4
DROP DATABASE mydb4;

# 总结:
# DDL语言,数据定义语言,操作数据库对象
# CREARE,ALTER,DROP
# 创建表:CREATE TABLE
# 修改表:ALTER TABLE
# 删除表:DROP TABLE

# DML语言:数据操作语言,是对表中的数据进行操作的语言,包含:增,删,改操作
CREATE TABLE person(
      name VARCHAR(32),
      age INT(3)
);

# 插入数据
# INSERT INTO 表名 [(字段1,字段2...)] VALUES (字段1的值，字段2的值...)
INSERT INTO person(name, age) VALUES ('张三',22);
INSERT INTO person(age, name) VALUES (22,'王五');

#未指定的列插入的都是列的默认值。当创建表时没有为列声明特定的默认值时，列默认值为null。
INSERT INTO person(name) VALUES('李四');


#字段名可以忽略不写，此时为全列插入，即:VALUES需要指定每一列的值，且顺序，个数，类型必须与表中的字段一致
INSERT INTO person VALUES('传奇',22);

# 查看person表中的所有数据
SELECT * FROM person

# 修改表数据操作:UPDATE语句
# UPDATE 表名 SET 字段名1=新值1[,字段名2=新值2,...][WHERE 过滤条件]

#通常修改语句要添加WHERE子句，用于添加过滤条件来定位要修改的记录。不添加WHERE子句则是全表所有记录都修改。
#下面的操作会将person表中每条记录的age字段值都改为55！！
UPDATE person SET age=55;

#将李四的年龄改成23岁
UPDATE person SET age=23 WHERE name='李四';

#WHERE中常用的条件:=,>,>=,<,<=,<>(不等于，!=不是所有数据库都支持)
#将年龄大于50岁的人的年龄改为25
UPDATE person SET age=25 WHERE age>50;

#修改字段时，可以将计算表达式的结果进行修改
#将每个人的年龄涨一岁
UPDATE person SET age=age+1;

#将年龄为24岁的人改名为李老四，年龄为55
UPDATE person
SET name='李老四',age=55
WHERE age=24;

SELECT * FROM person;

#删除数据:DELETE语句
# DELETE FROM 表名 [WHERE 过滤条件]
# 注意！！！不添加WHERE条件则是全表删除！！！

# 删除名字为李老四的记录
DELETE FROM person WHERE name='李老四';

# 删除年龄大于25岁的人
DELETE FROM person WHERE age>25;

#清空表操作
DELETE FROM person

练习:
1. 创建数据库day1db 字符集utf8并使用
create database day1db charset=utf8;
use day1db;
2. 创建t_hero表, 有name字段 字符集utf8
create table t_hero(name varchar(20))charset=utf8;
3. 修改表名为hero
rename table t_hero to hero;
4. 最后面添加价格字段money, 最前面添加id字段, name后面添加age字段
alter table hero add money int;
alter table hero add id int first;
alter table hero add age int after name;
5. 表中添加以下数据: 1,李白,50,6888 2,赵云,30,13888 3,刘备,25,6888
insert into hero values(1,'李白',50,6888);
insert into hero values(2,'赵云',30,13888);
insert into hero values(3,'刘备',25,6888);
6. 查询价格为6888的英雄名
select name from hero where money=6888;
7. 修改刘备年龄为52岁
update hero set age=52 where name='刘备';
8. 修改年龄小于等于50岁的价格为5000
update hero set money=5000 where age<=50;
9. 删除价格为5000的信息
delete from hero where money=5000;
10. 删除表, 删除数据库
drop table hero;
drop database day1db;

# 数据类型
数字类型
整数:INT(m)和BIGINT(m).m表示的是长度 例如:m=5 存数字18 实际存储:00018
浮点数:DOUBLE(m,n)。m表示数字长度(整体数字的长度，包含小数)，n表示小数位 DOUBLE(5,3) 99.999
# INSERT INTO XXX VALUES(12.9984) 实际插入数据时当精度超过可保存范围时，会进行四舍五入

字符类型
CHAR(n):定长字符串。每条记录实际占用的字节空间是定长的，不足的部分补充空字符来满足长度要求
        优点:查询速度快  缺点:浪费磁盘空间
VARCHAR(n):(变长字符串)。最多存n指定的字节数对应的字符，实际保存是用多少占多少。(推荐)
        优点:节省磁盘空间 缺点:查询速度慢
TEXT(n):可变长字符串，最大65535

日期时间类型
DATE:保存年月日
TIME:保存时分秒
DATETIME:保存年月日十分秒
TIMESTAMP:时间戳，记录UTC时间，从1970-01-01 00:00:00到表示的时间之间经过的毫秒

CREATE TABLE userinfo(
      id INT,
      name VARCHAR(30),
      birth DATETIME,
      salary DOUBLE(7,2)
);

INSERT INTO userinfo VALUES(1,'张三','1992-08-02 11:22:05',5000.59);
# DATETIME类型在不指定时分秒时，默认为00:00:00
INSERT INTO userinfo VALUES(2,'李四','1999-05-16',6500.23);
# DATETIME中年月日不可以省略
# INSERT INTO userinfo VALUES(3,'王五','06:15:55',1900.788);

#插入DOUBLE类型数字时，如果小数部分超过范围会进行四舍五入
INSERT INTO userinfo VALUES(3,'王五','1987-04-13 06:15:55',1900.788);
INSERT INTO userinfo VALUES(4,'赵六','1985-03-23',2000);
INSERT INTO userinfo VALUES(5,'钱七','1986-01-22',40000);
#整数超过部分会报错
# INSERT INTO userinfo VALUES(6,'老八','1976-02-18',140000);

SELECT * FROM userinfo

# 约束
# 约束是为表中某个字段添加特定的限制条件，只有符合条件的记录才可以保存
#
# 主键约束:该字段非空且唯一，用该字段的值唯一表示一条记录
# 非空约束:该字段的值不允许为空
# 外键约束:实际开发中几乎不使用外键约束

CREATE TABLE student(
     id INT AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(30) NOT NULL,
     age INT(3),
     gender CHAR(1)
);

DESC student;
#由于name为NOT NULL，因此名字必须指定值，不指定会报错
INSERT INTO student VALUES(NULL,NULL,55,'m');
#id本身的主键约束要求非空且唯一，但是由于有自增，所以当不指定时使用系统生成的自增值(有自增时就不要主动赋值)
INSERT INTO student VALUES(NULL,'刘桑',55,'m');
#主键有自增时，可以忽略主键字段的插入
INSERT INTO student(name,age,gender) VALUES('克晶',18,'f');
#有非空约束的字段插入数据时不可以忽略(因为忽略的字段默认插入NULL值)
# INSERT INTO student(age,gender) VALUES(18,'f');

#允许为NULL的字段可以通过显示的指定NULL作为值插入
INSERT INTO student(name,age,gender) VALUES('传奇',22,NULL);
#也可以不指定字段来为该字段隐式的插入NULL值
INSERT INTO student(name,age) VALUES('国斌',33);

SELECT * FROM student

CREATE TABLE teacher(
     id INT PRIMARY KEY,
     name VARCHAR(30) NOT NULL,
     age INT(3),
     gender CHAR(1)
);
INSERT INTO teacher VALUES(1,'张三',22,'F');
# 报错，主键字段不允许插入重复的值 Duplicate entry '1' for key 'PRIMARY'
# INSERT INTO teacher VALUES(1,'李四',23,'M');

# 报错，主键字段不能为NULL值 Column 'id' cannot be null
# INSERT INTO teacher VALUES(NULL,'李四',23,'M');

# NULL作为条件是，要使用IS NULL 或 IS NOT NULL

# 查看性别为null的学生信息
#查询不到任何数据
# SELECT * FROM student WHERE gender=NULL

SELECT * FROM student WHERE gender IS NULL;
SELECT * FROM student WHERE gender IS NOT NULL


USE empdb;
# DQL语句 数据查询语句
# 基本语法:
# SELECT 字段名1[,字段名2,... 或 *] FROM 表名
#查看emp表中每条记录的所有字段值
SELECT * FROM emp;
#查看每个员工的名字，职位，入职时间
SELECT name,job,hiredate FROM emp;

# WHERE子句，用来添加过滤条件，此时可以仅将满足条件的记录查询出来
# 比较运算符:=,>,>=,<,<=,<>
# 查看工资大于1000的员工的名字，职位，工资
# SELECT name,job,sal
# FROM emp
# WHERE sal>1000

# 查看职位除'人事'之外的所有员工的名字，工资和职位?
# SELECT name,sal,job
# FROM emp
# WHERE job <> '人事'

# !=操作不是所有数据库都支持
SELECT name,sal,job
FROM emp
WHERE job != '人事';

# 查看部门编号为2的员工的名字，工资，职位，部门编号(dept_id)
SELECT name,sal,job,dept_id FROM emp WHERE dept_id=2

# AND,OR来连接多个条件
# AND:都为真是才为真
# OR:都为假是才为假
#查看2号部门工资高于1000的员工的名字，工资，职位，部门编号?
# SELECT name,sal,job,dept_id
# FROM emp
# WHERE dept_id=2 AND sal>1000

# 查看职位是人事和销售的所有员工的名字，工资，职位，部门编号?
# SELECT name,sal,job,dept_id
# FROM emp
# WHERE job='人事' OR job='销售'

# 查看人事部的所有员工和工资高于1000的销售部员工的名字，工资，职位?
SELECT name,sal,job
FROM emp
WHERE job='人事' OR sal>1000  AND job='销售';

# 查看人事部和销售部工资高于1000的员工的名字，工资，职位?
SELECT name,sal,job
FROM emp
WHERE (job='人事' OR job='销售') AND sal>1000;
# AND优先级高于OR，因此可以通过()来提高OR的优先级

# IN(列表) 值在列表中(等于列表中的其中之一)
# 查看职位是人事和销售的所有员工的名字，工资，职位，部门编号?
SELECT name,sal,job,dept_id
FROM emp
WHERE job IN ('人事','销售');

# 查看职位是人事和销售以外的所有员工的名字，工资，职位，部门编号?
SELECT name,sal,job,dept_id
FROM emp
WHERE job<>'人事' AND job<>'销售';
#不在列表中
SELECT name,sal,job,dept_id
FROM emp
WHERE job NOT IN ('人事','销售');


# 查看工资在2000到3000之间的员工的名字，工资，职位?
SELECT name,sal,job
FROM emp
WHERE sal>=2000 AND sal<=3000;
# BETWEEN min AND max  在两者之间，即:>=min AND <=max
SELECT name,sal,job
FROM emp
WHERE sal BETWEEN 2000 AND 3000;

# DISTINCT用于去除指定列重复值的行   并且DISTINCT关键字必须紧跟SELECT
# 查看公司有多少种职位?
SELECT DISTINCT job FROM emp;
#多列去重时，就是去除指定这些列的值的组合有重复的行
#去除职位与部门编号重复的行
SELECT DISTINCT job,dept_id FROM emp

# 练习:
# 1. 查询2号部门工资高于1000的员工信息
SELECT *
FROM emp
WHERE dept_id=2 AND sal>=1000;
# 2. 查询3号部门或工资等于5000的员工信息
SELECT *
FROM emp
WHERE dept_id=3 OR sal=5000;
# 3. 查询工资在1000到2000之间的员工姓名和工资
SELECT name,sal
FROM emp
WHERE sal BETWEEN 1000 AND 2000;
# 4. 查询工资不等于3000和5000的员工信息
SELECT *
FROM emp
WHERE sal NOT IN(3000,5000);
# 5. 查询1号部门有哪几种不同的工作
SELECT DISTINCT job
FROM emp
WHERE dept_id=1

# 模糊查询:LIKE
# LIKE中两个通配符:_和%
# _(下划线):表示任意的一个字符
# %:表示任意个字符(0-多个)

# 查看姓孙的员工信息?(名字第一个字符是孙的员工)
SELECT name,sal,job
FROM emp
WHERE name LIKE '孙%';

# 查看名字里含"悟"的员工?
SELECT name,sal,job
FROM emp
WHERE name LIKE '%悟%';

# 查看名字第三个字是'精';
SELECT name,sal,job
FROM emp
WHERE name LIKE '__精';

# 查看第二个字是'骨'的员工?
SELECT name,sal,job
FROM emp
WHERE name LIKE '_骨%';

总结
%X%:字符串中包含X
%X:字符串以X结尾
X%:字符串以X开头
_X%:字符串第二个字符是X
%X_:倒数第二个字符是X
X%Y:字符串以X开头Y结尾
X_Y:字符串只有三个字，第一个是X，第三个是Y

练习:
# 1. 查询名字姓猪的员工姓名
SELECT name
FROM emp
WHERE name LIKE '猪%';
# 2. 查询名字中包含僧的员工信息
SELECT *
FROM emp
WHERE name LIKE '%僧%'
# 3. 查询名字以精结尾的员工姓名
SELECT name
FROM emp
WHERE name LIKE '%精';
# 4. 查询工作中包含销售并且工资大于1500的员工信息
SELECT *
FROM emp
WHERE job LIKE '%销售%'
AND sal>1500;
# 5. 查询工作中第二个字是售的员工姓名和工作
SELECT name,job
FROM emp
WHERE job LIKE '_售%';
# 6. 查询1号和2号部门中工作以市开头的员工信息
SELECT *
FROM emp
WHERE dept_id IN (1,2)
AND job LIKE '市%'

# ORDER BY子句，根据指定的字段排序查询结果集。该子句只能放在查询语句的最后一个子句上
# 查看公司所有员工的工资，且工资从低到高排序
SELECT name,sal
FROM emp
ORDER BY sal;

#按照时间排序时，越早的时间越小，越晚的时间越大
SELECT name,sal,hiredate
FROM emp
ORDER BY hiredate;

#按照升序排序时，可以使用关键字ASC，但是通常不需要写，因为默认就是升序(从小到大)
SELECT name,sal,hiredate
FROM emp
ORDER BY hiredate ASC;

#按照工资从大到小排序(降序)，降序使用关键字DESC
SELECT name,sal
FROM emp
ORDER BY sal DESC;

# 查看每个部门的工资排名
# ORDER BY可以按照多字段排序，排序优先级时先将结果集按照第一个字段的值排序，保证第一个字段排序顺序的前提下
# 将该字段值相同的记录中再按照第二个字段排序，依此类推。
SELECT name,dept_id,sal
FROM emp
ORDER BY dept_id,sal DESC

# 练习:
# 1. 查询有领导的员工信息,按照入职日期(hiredate) 升序排序
SELECT *
FROM emp
WHERE manager IS NOT NULL
ORDER BY hiredate;
2. 查询1号部门中名字中包含八的员工信息
SELECT *
FROM emp
WHERE dept_id=1 AND name LIKE '%八%';
# 3. 查询2号和3号部门中工资低于1500的员工信息
SELECT *
FROM emp
WHERE dept_id IN(2,3) AND sal<1500;

SELECT *
FROM emp
WHERE (dept_id=2 OR dept_id=3) AND sal<1500;
# 4. 查询人事和程序员中工资高于2500的员工姓名,工资和工作
SELECT name,sal,job
FROM emp
WHERE job IN('人事','程序员') AND sal>2500;
# 5. 查询不是CEO的员工中工资高于2000的员工姓名,工资和工作,并且按照工资降序排序
SELECT name,sal,job
FROM emp
WHERE job<>'CEO' AND sal>2000
ORDER BY sal DESC

# 分页查询
# 将满足查询条件的数据分段分批的查询出来。这可以减少不必要的系统开销。
# 分页查询在SQL92标准没有定义，这意味着不同的数据库，分页查询方式完全不一样。
# 在ORDER BY中使用LIMIT来完成的
# LIMIT 跳过的记录数,请求的记录数(每页显示的记录数)
# LIMIT (页数-1)*每页显示的记录数,每页显示的记录数

#按照工资降序后，每页显示3条，查看第二页
SELECT name,sal
FROM emp
ORDER BY sal LIMIT 3,3;

#按照工资降序后，每页显示3条，查看第三页
SELECT name,sal
FROM emp
ORDER BY sal LIMIT 6,3;

#按照工资降序后，每页显示4条，查看第3页
SELECT name,sal
FROM emp
ORDER BY sal LIMIT 8,4;